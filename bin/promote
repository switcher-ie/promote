#!/usr/bin/env bash

set -eo pipefail

################################################################################
# Validate Inputs
################################################################################

function usage {
    echo "usage: $0 [app] [environment] [namespace] [tag]"
    echo "  app          slug of the app (eg. broadband-plans)"
    echo "  environment  environment to deploy the application to (staging or production)"
    echo "  namespace    namespace to promote the image (eg. production / magenta)"
    echo "  tag          tag of the image to deploy (eg. abcdef0)"
    exit 1
}

[ -z "$4" ] && { usage; }

################################################################################
# Set Inputs
################################################################################

APP=$1
ENVIRONMENT=$2
NAMESPACE=$3
TAG=$4

################################################################################
# Constants
################################################################################

DIR="$(dirname "${BASH_SOURCE[0]}")"

################################################################################
# Set Variables
################################################################################

REPOSITORY="$ECR_ENDPOINT/$APP"
IMAGE="$REPOSITORY:$TAG"

BUILD_IMAGE="ghcr.io/switcher-ie/$APP:$TAG.build"

################################################################################
# Pull Build Image
################################################################################

docker pull "$IMAGE.build"

################################################################################
# Tag Release Image
################################################################################

docker tag "$IMAGE.build" "$IMAGE"

################################################################################
# Push Release Image
################################################################################

docker push "$IMAGE"

################################################################################
# Switch Context
################################################################################

aws eks update-kubeconfig --name "$EKS_CLUSTER"

################################################################################
# Run PreRelease
################################################################################

"${DIR}/pre-release" "${APP}" "${ENVIRONMENT}" "${NAMESPACE}" "${TAG}"

################################################################################
# Set properties
################################################################################

pushd "k8s/overlays/$ENVIRONMENT"
kustomize edit set image "unset=$REPOSITORY:$TAG"
popd

################################################################################
# Generate Schema
################################################################################

kustomize "build k8s/overlays/$ENVIRONMENT" -o k8s/patch.yaml

################################################################################
# Update Cluster
################################################################################

kubectl apply -f k8s/patch.yaml -n "$NAMESPACE" --wait

################################################################################
# Wait for Deployments
################################################################################

"${DIR}/wait" "$NAMESPACE"
